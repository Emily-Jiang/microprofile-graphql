//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[entities]]
== GraphQL Entities

Entities are the objects used in GraphQL. They can be:

- <<scalars>>, or simple objects ("scalars" in GraphQL terminology), 
- <<enums>> (similar to Java Enum), 
- <<complexobjects>> that are composed of scalars or other objects or enums or a combination of these.

[[scalars]]
=== Scalars

According to the https://graphql.org/learn/schema/#scalar-types[GraphQL documentation] a scalar has no sub-fields, and
all GraphQL implementations are expected to handle, the following scalar types:

- `Short` - which maps to a Java `short`/`Short`
- `Int` - which maps to a Java `int`/`Integer`
- `Long` - which maps to a Java `long`/`Long`
- `Float` - which maps to a Java `float`/`Float` or `double`/`Double`.
- `Boolean` - which maps to a Java `boolean`/`Boolean`.
- `Char` - which maps to a Java `char`, `Character`.
- `String` - which maps to a Java `String`.
- `Byte` - which maps to a Java `byte`/`Byte`.
- `BigInteger` - which maps to a Java `BigInteger`.
- `BigDecimal` - which maps to a Java BigDecimal`.
- `Date` - which maps to a Java `java.time.LocalDate`.
- `Time` - which maps to a Java `java.time.LocalTime`.
- `DateTime` - which maps to a Java `java.time.LocalDateTime`.
- `ID` - which is a specialized type serialized like a `String`. Usually, ID types are not intended to be human-readable.

Note that an ID scalar must map to a Java `String`, numerical primitive (`long`, `int`, `double`, `float`) or their
object equivalents (`Long`, `Integer`, `Double`, `Float`), or a `java.util.UUID` - anything else is considered a deployment error.

The GraphQL specification also allows for users or implementers to define custom scalars:

==== Dates
By default the date related scalars (DateTime, Date, and Time) will use a ISO format.

- `yyyy-MM-dd\'T\'HH:mm:ss\'Z'` for DateTime
- `yyyy-MM-dd` for Date
- `HH:mm:ss` for Time 

By adding the JSON-B annotation `@JsonbDateFormat` a user can change the format.

==== Custom user defined scalars
@TODO: Define how to create your own scalar.

[[enums]]
=== Enumerable types

GraphQL offers enumerable types similar to Java `enum` types. 
In order for an enum to be defined in the GraphQL schema, it must meet at least one of the following criteria:

- It must be the return type or parameter (optionally annotated with `@Name`) of a query or mutation method,
- It must be annotated with `@Enum`

The implementation will produce the GraphQL `enum` type in
the schema. For example:

[source,java,numbered]
----
@Type
public class SuperHero {
    private ShirtSize tshirtSize; // public getters/setters, ...

    @Enum("ClothingSize)
    public enum ShirtSize {
        S, M, L, XL
    }
}
----

The implementation would generate a schema that would include:

[source,graphql,numbered]
----
enum ClothingSize {
  L
  M
  S
  XL
}

type SuperHero {
  #...
  tshirtSize: ClothingSize
  #...
}

input SuperHeroInput
  #...
  tshirtSize: ClothingSize
  #...
}
#...
----

When using an enumerated type, it is considered a validation error when the client enters a value that is not included
in the enumerated type.

[[complexobjects]]
=== Complex objects

In order for an entity class to be defined in the GraphQL schema, it must meet at least one of the following criteria:

- It must be the return type or parameter (optionally annotated with `@Name`) of a query or mutation method,
- It must be annotated with `@Type`,
- It must be annotated with `@Input`

Any Plain Old Java Object (POJO) can be an entity.  No special annotations are required. Implementations of MicroProfile
GraphQL must use JSON-B to serialize and deserialize entities to JSON, so it is possible to further define entities
using JSON-B annotations.

If the entity cannot be serialized by JSON-B, the implementation must return in an internal server error to the client.

[[types]]
==== Types vs Input

GraphQL differentiates types from input types.  Input types are entities that are sent by the client as arguments to
queries or mutations. Types are entities that are sent from the server to the client as return types from queries or
mutations.

In many cases the same Java type can be used for input (sent _from_ the client) and output (sent _to_ the client), but
there are cases where an application may need two different Java types to handle input and output.

The `@Type` annotation is used for output entities while the `@Input` annotation is used for input entities.

Normally these annotations are unnecessary if the type can be serialized and/or deserialized by JSON-B, and if the type
is specified in a query or mutation method. These annotations can be used to specify the name of the type in the GraphQL
schema; by default, the entity name in the schema will be the same as the simple class name of the entity type for
output types; for input types, the simple class name is used with "Input" appended. Thus, an entity class named 
`com.mypkg.Tree` would create a GraphQL schema type called "Tree" and an input type called "TreeInput".

==== Java interfaces as GraphQL entity types

It is possible for entities (types and input types) to be defined as a Java interfaces. In order for JSON-B to
deserialize an interface, the interface may need a `JsonbDeserializer` in order to instantiate a concrete type.

==== GraphQL interfaces

GraphQL interfaces are very similar in concept to Java interfaces, in that other types may implement an interface. This
allows the GraphQL schema to better align with the Java application's model and allows clients to retrieve the same data
(fields) on multiple different entity types.  GraphQL interfaces are created with a Java interface type is annotated
with `@Interface`. The MP GraphQL implementation must then generate a schema where every class in the application that
implements that Java interface must have a type in the schema that implements the GraphQL interface. For example:

[source,java,numbered]
----
@Interface
public interface Character {
    public String getName();
}

public class SuperHero implements Character {

    private String name;

    @Override
    @Description("Name of hero")
    public String getName() { return name; }

    // ...
}

public class Villain implements Character {

    private String name;

    @Override
    @Description("Name of villain")
    public String getName() { return name; }

    // ...
}
----

This should generate a schema like:

[source,graphql,numbered]
----
interface Character {
  name: String
}

type SuperHero implements Character {
  #Name of hero
  name: String
  #...
}

type Villain implements Character {
  #Name of villain
  name: String
  #...
}
----

==== Limitations

===== Generic types

TODO: info on limitations to generic types (collections only?)

[[fields]]
==== Fields

Fields in GraphQL are similar to fields in Java in that they are a child of a single entity.  Thus, Java fields on
entity classes are, by default, GraphQL fields of that entity. It is also possible for GraphQL fields that are not part
of the Java entity object to be represented as a field of the GraphQL entity.  This is because all GraphQL fields are
also queries.

Consider the following example:

[source,java,numbered]
----
public class SuperHero {
    private String name;
    private String realName;
    private List<String> superPowers;
    // ...
}
----

The Java fields, `name`, `realName` and `superPowers` are all GraphQL fields of the `SuperHero` entity type. Now
consider this example:

[source,java,numbered]
----
@GraphQLApi
public class MyQueries {

    @Query
    public Location currentLocation(@Source SuperHero hero) {
        return getLocationForHero(hero.getName());
    }
    // ...
}
----

The above query adds a new field to the `SuperHero` GraphQL entity type, called `currentLocation`.  This field is not 
part of the `SuperHero` Java class, but _is_ part of the GraphQL entity.  This association is made by using the
`@Source` annotation. Also note that the `currentLocation` method will only be invoked if the client requests the
`currentLocation` field in the query. This is a useful way to prevent looking up data on the server that the client is
not interested in.

Users can use the `@Name` annotation to specify a different field name for the field in the GraphQL
schema. For example:

[source,java,numbered]
----
public class Widget {

    @Name("cost")
    private float price;
    // ... public getters/setters
}
----

This would result in a schema that looks something like:

[source,graphql,numbered]
----
type Widget {
    cost: Float!
}
input WidgetInput {
    cost: Float!
}
----

By putting the `@Name` annotation on the `getter` method, rather than the field, the name will only apply to the `Type`, eg:

[source,java,numbered]
----
public class Widget {

    private float price;
    
    @Name("cost")
    public float getPrice(){
        return this.price;
    }

    public void setPrice(float price){
        this.price = price;
    }
}
----

This would result in a schema that looks something like:

[source,graphql,numbered]
----
type Widget {
    cost: Float!
}
input WidgetInput {
    price: Float!
}
----

The input type keeps the default field name. Similarly, when the `@Name` annotation is only placed on the `setter` method, the name will only apply to the `Input`, eg:

[source,java,numbered]
----
public class Widget {

    private float price;
    
    public float getPrice(){
        return this.price;
    }

    @Name("cost")
    public void setPrice(float price){
        this.price = price;
    }
}
----

This would result in a schema that looks something like:

[source,graphql,numbered]
----
type Widget {
    price: Float!
}
input WidgetInput {
    cost: Float!
}
----

When the default name is used, i.e, there is no annotation specifying the name, the field name will always be used, and not the method name. 

The same applies to `Query` and `Mutation` methods. If that method starts with `get`, `set` or `is`, that will be removed when detirmining the name. Eg:

[source,java,numbered]
----
@GraphQLApi
public class MyQueries {

    @Query
    public Location getCurrentLocation(@Source SuperHero hero) {
        // ...
    }
}
----

This would result in a schema that looks something like this:
 
[source,graphql,numbered]
----
#Query root
type Query {
  #...
  currentLocation(arg0: SuperHeroInput): String
  #...
}
----

Note that the `get` is removed from the name in the schema.
  
=== Other annotations available on Complex Objects

==== Description

The `@Description` annotation can be used to provide comments in the generated schema for entity types (both input and
output types) and fields.

==== Default Values

The `@DefaultValue` annotation may be used to specify a value in an input type to be used if the client did not specify
a value. Default values may only be specified on input types and method parameters and will have no
effect if specified on output types.  The value specified in this annotation may be plain text for Java primitives and 
`String` types or JSON for complex types.

==== Ignorable fields

There may be cases where a developer wants to use a class as a GraphQL type or input type, but use fields that should
not be part of the exposed schema. The `@Ignore` annotation can be placed on the field to prevent it from being part of
the schema.

If the `@Ignore` annotation is placed on the field itself, then the field will be excluded from both the input and 
output types in the generated schema.  If the annotation is only placed on the "getter" method, then it will only be
excluded from the input type.  If the annotation is only placed on the "setter" method, then it will only be excluded
from the output type.

==== Non-nullable fields

The GraphQL specification states that fields may be marked as non-nullable - usually the field's type is marked with an
exclamation point to indicate that null values are not allowed.  Non-nullable fields may be present on types and input
types, providing the client with the proper expectations for providing an input type and that they can expect a non-null
value on the return type. If the client sends a null value for a required (non-nullable) field or sends an entity with
the required (non-nullable) field unspecified, the implementation should respond with a validation error. Likewise, the
implementation should return an error if a null is returned for a required (non-nullable) field from the application
code.

By default all GraphQL fields generated from Java primitive properties (`boolean`, `int`, `double`, etc.) will
automatically be marked as required.  If a Java primitive property has a `@DefaultValue` annotation value, then null is
allowed, but the implementation is expected to convert the value to be the default value specified in the annotation.

By default, all GraphQL fields generated from non-primitive properties will be considered nullable. A user may specify
that a field is required/non-nullable by adding the `@NonNull` annotation. This annotation may be applied to an entity's
getter method, setter method or field. The placement will determine whether it applies to the type, input type or both,
respectively.

The implementation should ignore a `@NonNull` annotation when it is on the same field or setter method that also
contains `@DefaultValue` annotation, as the "null" value would result in the default value being used.

One drawback to using non-nullable fields is that if there is an error loading a child field, that error could propagate
itself up causing the field to be null - and since this is itself an error condition, the implementation must return
the non-null field error, which means that the implementation would not be able to send partial results for other child
fields.